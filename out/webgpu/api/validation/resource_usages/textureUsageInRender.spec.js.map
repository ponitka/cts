{"version":3,"sources":["../../../../../src/webgpu/api/validation/resource_usages/textureUsageInRender.spec.ts"],"names":["description","poptions","params","makeTestGroup","kTextureFormatInfo","ValidationTest","TextureUsageTracking","createTexture","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","device","size","depth","dimension","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","SAMPLED","g","READ_BASE_LEVEL","READ_BASE_LAYER","test","writeBaseLevel","writeBaseLayer","_success","fn","t","texture","sampleView","createView","baseMipLevel","baseArrayLayer","renderView","bindGroupLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","FRAGMENT","type","bindGroup","createBindGroup","resource","layout","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","attachment","loadValue","r","b","a","storeOp","setBindGroup","endPass","expectValidationError","finish","combine","unless","readAspect","writeAspect","stencil","view","success","depthStencilAttachment","depthStoreOp","depthLoadValue","stencilStoreOp","stencilLoadValue"],"mappings":"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","sourcesContent":["export const description = `\nTexture Usages Validation Tests in Render Pass.\n\nTest Coverage:\n - Tests that read and write usages upon the same texture subresource, or different subresources\n   of the same texture. Different subresources of the same texture includes different mip levels,\n   different array layers, and different aspects.\n   - When read and write usages are binding to the same texture subresource, an error should be\n     generated. Otherwise, no error should be generated.\n`;\n\nimport { poptions, params } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kTextureFormatInfo } from '../../../capability_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass TextureUsageTracking extends ValidationTest {\n  createTexture(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n    } = {}\n  ): GPUTexture {\n    const {\n      width = 32,\n      height = 32,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'rgba8unorm',\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depth: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage: GPUTextureUsage.OUTPUT_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    });\n  }\n}\n\nexport const g = makeTestGroup(TextureUsageTracking);\n\nconst READ_BASE_LEVEL = 3;\nconst READ_BASE_LAYER = 0;\n\ng.test('readwrite_upon_subresources')\n  .params([\n    // read and write usages are binding to the same texture subresource.\n    {\n      writeBaseLevel: READ_BASE_LEVEL,\n      writeBaseLayer: READ_BASE_LAYER,\n      _success: false,\n    },\n\n    // read and write usages are binding to different mip levels of the same texture.\n    {\n      writeBaseLevel: READ_BASE_LEVEL + 1,\n      writeBaseLayer: READ_BASE_LAYER,\n      _success: true,\n    },\n\n    // read and write usages are binding to different array layers of the same texture.\n    {\n      writeBaseLevel: READ_BASE_LEVEL,\n      writeBaseLayer: READ_BASE_LAYER + 1,\n      _success: true,\n    },\n  ])\n  .fn(async t => {\n    const { writeBaseLevel, writeBaseLayer, _success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: 2, mipLevelCount: 6 });\n\n    const sampleView = texture.createView({\n      baseMipLevel: READ_BASE_LEVEL,\n      mipLevelCount: 1,\n      baseArrayLayer: READ_BASE_LAYER,\n      arrayLayerCount: 1,\n    });\n    const renderView = texture.createView({\n      baseMipLevel: writeBaseLevel,\n      mipLevelCount: 1,\n      baseArrayLayer: writeBaseLayer,\n      arrayLayerCount: 1,\n    });\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, type: 'sampled-texture' }],\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      entries: [{ binding: 0, resource: sampleView }],\n      layout: bindGroupLayout,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: renderView,\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setBindGroup(0, bindGroup);\n    pass.endPass();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !_success);\n  });\n\ng.test('readwrite_upon_aspects')\n  .params(\n    params()\n      .combine(poptions('format', ['depth32float', 'depth24plus', 'depth24plus-stencil8'] as const))\n      .combine(poptions('readAspect', ['all', 'depth-only', 'stencil-only'] as const))\n      .combine(poptions('writeAspect', ['all', 'depth-only', 'stencil-only'] as const))\n      .unless(\n        ({ format, readAspect, writeAspect }) =>\n          // TODO: Exclude depth-only aspect once WebGPU supports stencil-only texture format(s).\n          (readAspect === 'stencil-only' && !kTextureFormatInfo[format].stencil) ||\n          (writeAspect === 'stencil-only' && !kTextureFormatInfo[format].stencil)\n      )\n  )\n  .fn(async t => {\n    const { format, readAspect, writeAspect } = t.params;\n\n    const view = t.createTexture({ format }).createView();\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, type: 'sampled-texture' }],\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      entries: [{ binding: 0, resource: view }],\n      layout: bindGroupLayout,\n    });\n\n    const success =\n      (readAspect === 'depth-only' && writeAspect === 'stencil-only') ||\n      (readAspect === 'stencil-only' && writeAspect === 'depth-only');\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: t.createTexture().createView(),\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n      depthStencilAttachment: {\n        attachment: view,\n        depthStoreOp: 'clear',\n        depthLoadValue: 'load',\n        stencilStoreOp: 'clear',\n        stencilLoadValue: 'load',\n      },\n    });\n    pass.setBindGroup(0, bindGroup);\n    pass.endPass();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n"],"file":"textureUsageInRender.spec.js"}