{"version":3,"sources":["../../../../../src/webgpu/api/operation/render_pass/storeOp.spec.ts"],"names":["description","params","poptions","makeTestGroup","kTextureFormatInfo","kTextureFormats","GPUTest","kMipLevel","kMipLevelCount","kNumColorAttachments","kArrayLayers","kStoreOps","kHeight","kWidth","g","test","combine","fn","t","kColorFormat","colorAttachment","device","createTexture","format","size","width","height","depth","usage","GPUTextureUsage","COPY_SRC","OUTPUT_ATTACHMENT","colorAttachmentView","createView","kDepthStencilFormat","depthStencilAttachment","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","attachment","loadValue","r","b","a","storeOp","colorStoreOperation","depthLoadValue","depthStoreOp","depthStencilStoreOperation","stencilLoadValue","stencilStoreOp","endPass","defaultQueue","submit","finish","expectedColorValue","R","G","B","A","expectSingleColor","exp","expectedDepthValue","Depth","filter","colorFormat","color","renderable","arrayLayer","mipLevelCount","colorViewDesc","baseArrayLayer","baseMipLevel","mipLevel","arrayLayerCount","storeOperation","expectedValue","slice","layout","i","push","renderPassColorAttachmentDescriptors","storeOperation1","storeOperation2","depthStencilFormat","stencil","copyable","depthStencilViewDesc","depthStencilAttachmentView"],"mappings":"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","sourcesContent":["export const description = `API Operation Tests for RenderPass StoreOp.\n\n  Test Coverage:\n\n  - Tests that color and depth-stencil store operations {'clear', 'store'} work correctly for a\n    render pass with both a color attachment and depth-stencil attachment.\n      TODO: use depth24plus-stencil8\n\n  - Tests that store operations {'clear', 'store'} work correctly for a render pass with multiple\n    color attachments.\n      TODO: test with more interesting loadOp values\n\n  - Tests that store operations {'clear', 'store'} work correctly for a render pass with a color\n    attachment for:\n      - All renderable color formats\n      - mip level set to {'0', mip > '0'}\n      - array layer set to {'0', layer > '1'} for 2D textures\n      TODO: depth slice set to {'0', slice > '0'} for 3D textures\n\n  - Tests that store operations {'clear', 'store'} work correctly for a render pass with a\n    depth-stencil attachment for:\n      - All renderable depth-stencil formats\n      - mip level set to {'0', mip > '0'}\n      - array layer set to {'0', layer > '1'} for 2D textures\n      TODO: test depth24plus and depth24plus-stencil8 formats\n      TODO: test that depth and stencil aspects are set seperately\n      TODO: depth slice set to {'0', slice > '0'} for 3D textures\n      TODO: test with more interesting loadOp values`;\n\nimport { params, poptions } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kTextureFormatInfo, kTextureFormats } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { PerTexelComponent } from '../../../util/texture/texelData.js';\n\n// Test with a zero and non-zero mip.\nconst kMipLevel: number[] = [0, 1];\nconst kMipLevelCount = 2;\n\n// Test with different numbers of color attachments.\ntype NumColorAttachments = 1 | 2 | 3 | 4;\nconst kNumColorAttachments: NumColorAttachments[] = [1, 2, 3, 4];\n\n// Test with a zero and non-zero array layer.\nconst kArrayLayers: number[] = [0, 1];\n\nconst kStoreOps: GPUStoreOp[] = ['clear', 'store'];\n\nconst kHeight = 2;\nconst kWidth = 2;\n\nexport const g = makeTestGroup(GPUTest);\n\n// Tests a render pass with both a color and depth stencil attachment to ensure store operations are\n// set independently.\ng.test('render_pass_store_op,color_attachment_with_depth_stencil_attachment')\n  .params(\n    params()\n      .combine(poptions('colorStoreOperation', kStoreOps))\n      .combine(poptions('depthStencilStoreOperation', kStoreOps))\n  )\n  .fn(t => {\n    // Create a basic color attachment.\n    const kColorFormat: GPUTextureFormat = 'rgba8unorm';\n    const colorAttachment = t.device.createTexture({\n      format: kColorFormat,\n      size: { width: kWidth, height: kHeight, depth: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    const colorAttachmentView = colorAttachment.createView();\n\n    // Create a basic depth/stencil attachment.\n    const kDepthStencilFormat: GPUTextureFormat = 'depth32float';\n    const depthStencilAttachment = t.device.createTexture({\n      format: kDepthStencilFormat,\n      size: { width: kWidth, height: kHeight, depth: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    // Color load operation will clear to {1.0, 1.0, 1.0, 1.0}.\n    // Depth & stencil load operations will clear to 1.0.\n    // Store operations are determined by test the params.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: colorAttachmentView,\n          loadValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },\n          storeOp: t.params.colorStoreOperation,\n        },\n      ],\n      depthStencilAttachment: {\n        attachment: depthStencilAttachment.createView(),\n        depthLoadValue: 1.0,\n        depthStoreOp: t.params.depthStencilStoreOperation,\n        stencilLoadValue: 1.0,\n        stencilStoreOp: t.params.depthStencilStoreOperation,\n      },\n    });\n    pass.endPass();\n\n    t.device.defaultQueue.submit([encoder.finish()]);\n\n    // Check that the correct store operation occurred.\n    let expectedColorValue: PerTexelComponent<number> = {};\n    if (t.params.colorStoreOperation === 'clear') {\n      // If colorStoreOp was clear, the texture should now contain {0.0, 0.0, 0.0, 0.0}.\n      expectedColorValue = { R: 0.0, G: 0.0, B: 0.0, A: 0.0 };\n    } else if (t.params.colorStoreOperation === 'store') {\n      // If colorStoreOP was store, the texture should still contain {1.0, 1.0, 1.0, 1.0}.\n      expectedColorValue = { R: 1.0, G: 1.0, B: 1.0, A: 1.0 };\n    }\n    t.expectSingleColor(colorAttachment, kColorFormat, {\n      size: [kHeight, kWidth, 1],\n      exp: expectedColorValue,\n    });\n\n    // Check that the correct store operation occurred.\n    let expectedDepthValue: PerTexelComponent<number> = {};\n    if (t.params.depthStencilStoreOperation === 'clear') {\n      // If depthStencilStoreOperation was clear, the texture's depth component should be 0.0, and\n      // the stencil component should be 0.0.\n      expectedDepthValue = { Depth: 0.0 };\n    } else if (t.params.depthStencilStoreOperation === 'store') {\n      // If depthStencilStoreOperation was store, the texture's depth component should be 1.0, and\n      // the stencil component should be 1.0.\n      expectedDepthValue = { Depth: 1.0 };\n    }\n    t.expectSingleColor(depthStencilAttachment, kDepthStencilFormat, {\n      size: [kHeight, kWidth, 1],\n      exp: expectedDepthValue,\n    });\n  });\n\n// Tests that render pass color attachment store operations work correctly for all renderable color\n// formats, mip levels and array layers.\ng.test('render_pass_store_op,color_attachment_only')\n  .params(\n    params()\n      .combine(poptions('colorFormat', kTextureFormats))\n      // Filter out any depth/stencil or non-renderable formats\n      .filter(\n        ({ colorFormat }) =>\n          kTextureFormatInfo[colorFormat].color && kTextureFormatInfo[colorFormat].renderable\n      )\n      .combine(poptions('storeOperation', kStoreOps))\n      .combine(poptions('mipLevel', kMipLevel))\n      .combine(poptions('arrayLayer', kArrayLayers))\n  )\n  .fn(t => {\n    const kColorFormat: GPUTextureFormat = 'rgba8unorm';\n    const colorAttachment = t.device.createTexture({\n      format: kColorFormat,\n      size: { width: kWidth, height: kHeight, depth: t.params.arrayLayer + 1 },\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    const colorViewDesc: GPUTextureViewDescriptor = {\n      baseArrayLayer: t.params.arrayLayer,\n      baseMipLevel: t.params.mipLevel,\n      mipLevelCount: 1,\n      arrayLayerCount: 1,\n    };\n\n    const colorAttachmentView = colorAttachment.createView(colorViewDesc);\n\n    // Color load operation will clear to {1.0, 0.0, 0.0, 1.0}.\n    // Color store operation is determined by the test params.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: colorAttachmentView,\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          storeOp: t.params.storeOperation,\n        },\n      ],\n    });\n    pass.endPass();\n    t.device.defaultQueue.submit([encoder.finish()]);\n\n    // Check that the correct store operation occurred.\n    let expectedValue: PerTexelComponent<number> = {};\n    if (t.params.storeOperation === 'clear') {\n      // If colorStoreOp was clear, the texture should now contain {0.0, 0.0, 0.0, 0.0}.\n      expectedValue = { R: 0.0, G: 0.0, B: 0.0, A: 0.0 };\n    } else if (t.params.storeOperation === 'store') {\n      // If colorStoreOP was store, the texture should still contain {1.0, 0.0, 0.0, 1.0}.\n      expectedValue = { R: 1.0, G: 0.0, B: 0.0, A: 1.0 };\n    }\n\n    t.expectSingleColor(colorAttachment, kColorFormat, {\n      size: [kHeight, kWidth, 1],\n      slice: t.params.arrayLayer,\n      exp: expectedValue,\n      layout: { mipLevel: t.params.mipLevel },\n    });\n  });\n\n// Test with multiple color attachments to ensure each attachment's storeOp is set independently.\ng.test('render_pass_store_op,multiple_color_attachments')\n  .params(\n    params()\n      .combine(poptions('colorAttachments', kNumColorAttachments))\n      .combine(poptions('storeOperation1', kStoreOps))\n      .combine(poptions('storeOperation2', kStoreOps))\n  )\n  .fn(t => {\n    const kColorFormat: GPUTextureFormat = 'rgba8unorm';\n    const colorAttachments: GPUTexture[] = [];\n\n    for (let i = 0; i < t.params.colorAttachments; i++) {\n      colorAttachments.push(\n        t.device.createTexture({\n          format: kColorFormat,\n          size: { width: kWidth, height: kHeight, depth: 1 },\n          usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.OUTPUT_ATTACHMENT,\n        })\n      );\n    }\n\n    // Color load operation will clear to {1.0, 1.0, 1.0, 1.0}\n    // Color store operation is determined by test params. Use storeOperation1 for even numbered\n    // attachments and storeOperation2 for odd numbered attachments.\n    const renderPassColorAttachmentDescriptors: GPURenderPassColorAttachmentDescriptor[] = [];\n    for (let i = 0; i < t.params.colorAttachments; i++) {\n      renderPassColorAttachmentDescriptors.push({\n        attachment: colorAttachments[i].createView(),\n        loadValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },\n        storeOp: i % 2 === 0 ? t.params.storeOperation1 : t.params.storeOperation2,\n      });\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: renderPassColorAttachmentDescriptors,\n    });\n    pass.endPass();\n    t.device.defaultQueue.submit([encoder.finish()]);\n\n    // Check that the correct store operation occurred.\n    let expectedValue: PerTexelComponent<number> = {};\n    for (let i = 0; i < t.params.colorAttachments; i++) {\n      if (renderPassColorAttachmentDescriptors[i].storeOp === 'clear') {\n        // If colorStoreOp was clear, the texture should now contain {0.0, 0.0, 0.0, 0.0}.\n        expectedValue = { R: 0.0, G: 0.0, B: 0.0, A: 0.0 };\n      } else if (renderPassColorAttachmentDescriptors[i].storeOp === 'store') {\n        // If colorStoreOP was store, the texture should still contain {1.0, 1.0, 1.0, 1.0}.\n        expectedValue = { R: 1.0, G: 1.0, B: 1.0, A: 1.0 };\n      }\n      t.expectSingleColor(colorAttachments[i], kColorFormat, {\n        size: [kHeight, kWidth, 1],\n        exp: expectedValue,\n      });\n    }\n  });\n\n// Tests that render pass depth stencil store operations work correctly for all renderable color\n// formats, mip levels and array layers.\ng.test('render_pass_store_op,depth_stencil_attachment_only')\n  .params(\n    params()\n      .combine(poptions('depthStencilFormat', kTextureFormats))\n      // Filter out color and non-renderable formats.\n      .filter(\n        ({ depthStencilFormat }) =>\n          (kTextureFormatInfo[depthStencilFormat].depth ||\n            kTextureFormatInfo[depthStencilFormat].stencil) &&\n          kTextureFormatInfo[depthStencilFormat].renderable &&\n          kTextureFormatInfo[depthStencilFormat].copyable\n      )\n      .combine(poptions('storeOperation', kStoreOps))\n      .combine(poptions('mipLevel', kMipLevel))\n      .combine(poptions('arrayLayer', kArrayLayers))\n  )\n  .fn(t => {\n    const depthStencilAttachment = t.device.createTexture({\n      format: t.params.depthStencilFormat,\n      size: { width: kWidth, height: kHeight, depth: t.params.arrayLayer + 1 },\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    const depthStencilViewDesc: GPUTextureViewDescriptor = {\n      baseArrayLayer: t.params.arrayLayer,\n      baseMipLevel: t.params.mipLevel,\n      mipLevelCount: 1,\n      arrayLayerCount: 1,\n    };\n\n    const depthStencilAttachmentView = depthStencilAttachment.createView(depthStencilViewDesc);\n\n    // Depth-stencil load operation will clear to depth = 1.0, stencil = 1.0.\n    // Depth-stencil store operate is determined by test params.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        attachment: depthStencilAttachmentView,\n        depthLoadValue: 1.0,\n        depthStoreOp: t.params.storeOperation,\n        stencilLoadValue: 1.0,\n        stencilStoreOp: t.params.storeOperation,\n      },\n    });\n    pass.endPass();\n    t.device.defaultQueue.submit([encoder.finish()]);\n\n    let expectedValue: PerTexelComponent<number> = {};\n    if (t.params.storeOperation === 'clear') {\n      // If depthStencilStoreOperation was clear, the texture's depth component should be 0.0,\n      expectedValue = { Depth: 0.0 };\n    } else if (t.params.storeOperation === 'store') {\n      // If depthStencilStoreOperation was store, the texture's depth component should be 1.0,\n      expectedValue = { Depth: 1.0 };\n    }\n\n    t.expectSingleColor(depthStencilAttachment, t.params.depthStencilFormat, {\n      size: [kHeight, kWidth, 1],\n      slice: t.params.arrayLayer,\n      exp: expectedValue,\n      layout: { mipLevel: t.params.mipLevel },\n    });\n  });\n"],"file":"storeOp.spec.js"}