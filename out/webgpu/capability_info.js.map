{"version":3,"sources":["../../src/webgpu/capability_info.ts"],"names":["keysOf","obj","Object","keys","numericKeysOf","map","n","Number","kBufferUsageInfo","GPUBufferUsage","MAP_READ","MAP_WRITE","COPY_SRC","COPY_DST","INDEX","VERTEX","UNIFORM","STORAGE","INDIRECT","QUERY_RESOLVE","kBufferUsages","kTextureFormatInfo","renderable","color","depth","stencil","storage","copyable","bytesPerBlock","blockWidth","blockHeight","kTextureFormats","kTextureDimensionInfo","kTextureDimensions","kTextureAspectInfo","kTextureAspects","kTextureUsageInfo","GPUTextureUsage","SAMPLED","OUTPUT_ATTACHMENT","kTextureUsages","kTextureComponentTypeInfo","kTextureComponentTypes","kTextureViewDimensionInfo","kTextureViewDimensions","kMaxBindingsPerBindGroup","kPerStageBindingLimits","class","max","kPerPipelineBindingLimits","maxDynamic","kBindableResource","uniformBuf","storageBuf","plainSamp","compareSamp","sampledTex","storageTex","errorBuf","errorSamp","errorTex","kBindableResources","kBindingKind","resource","perStageLimitClass","perPipelineLimitClass","sampler","kValidStagesAll","validStages","GPUShaderStage","FRAGMENT","COMPUTE","kValidStagesStorageWrite","kBufferBindingTypeInfo","usage","kBufferBindingTypes","kSamplerBindingTypeInfo","kSamplerBindingTypes","kTextureBindingTypeInfo","kTextureBindingTypes","kBindingTypeInfo","kBindingTypes","kShaderStages","kShaderStageCombinations"],"mappings":"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","sourcesContent":["type valueof<K> = K[keyof K];\ntype GPUTextureUsage = valueof<typeof GPUTextureUsage>;\ntype GPUBufferUsage = valueof<typeof GPUBufferUsage>;\n\nfunction keysOf<T extends string>(obj: { [k in T]: unknown }): readonly T[] {\n  return (Object.keys(obj) as unknown[]) as T[];\n}\n\nfunction numericKeysOf<T>(obj: object): readonly T[] {\n  return (Object.keys(obj).map(n => Number(n)) as unknown[]) as T[];\n}\n\n// Buffers\n\nexport const kBufferUsageInfo: {\n  readonly [k in GPUBufferUsage]: {};\n} = /* prettier-ignore */ {\n  [GPUBufferUsage.MAP_READ]:      {},\n  [GPUBufferUsage.MAP_WRITE]:     {},\n  [GPUBufferUsage.COPY_SRC]:      {},\n  [GPUBufferUsage.COPY_DST]:      {},\n  [GPUBufferUsage.INDEX]:         {},\n  [GPUBufferUsage.VERTEX]:        {},\n  [GPUBufferUsage.UNIFORM]:       {},\n  [GPUBufferUsage.STORAGE]:       {},\n  [GPUBufferUsage.INDIRECT]:      {},\n  [GPUBufferUsage.QUERY_RESOLVE]: {},\n};\nexport const kBufferUsages = numericKeysOf<GPUBufferUsage>(kBufferUsageInfo);\n\n// Textures\n\nexport const kTextureFormatInfo: {\n  readonly [k in GPUTextureFormat]: {\n    readonly renderable: boolean;\n    readonly color: boolean;\n    readonly depth: boolean;\n    readonly stencil: boolean;\n    readonly storage: boolean;\n    readonly copyable: boolean;\n    readonly bytesPerBlock?: number;\n    readonly blockWidth?: number;\n    readonly blockHeight?: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  // Try to keep these manually-formatted in a readable grid.\n  // (Note: this list should always match the one in the spec.)\n\n  // 8-bit formats\n  'r8unorm':                { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  1, blockWidth: 1, blockHeight: 1 },\n  'r8snorm':                { renderable: false, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  1, blockWidth: 1, blockHeight: 1 },\n  'r8uint':                 { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  1, blockWidth: 1, blockHeight: 1 },\n  'r8sint':                 { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  1, blockWidth: 1, blockHeight: 1 },\n  // 16-bit formats\n  'r16uint':                { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  'r16sint':                { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  'r16float':               { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  'rg8unorm':               { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  'rg8snorm':               { renderable: false, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  'rg8uint':                { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  'rg8sint':                { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  // 32-bit formats\n  'r32uint':                { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'r32sint':                { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'r32float':               { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rg16uint':               { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rg16sint':               { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rg16float':              { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rgba8unorm':             { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rgba8unorm-srgb':        { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rgba8snorm':             { renderable: false, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rgba8uint':              { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rgba8sint':              { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'bgra8unorm':             { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'bgra8unorm-srgb':        { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  // Packed 32-bit formats\n  'rgb10a2unorm':           { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rg11b10float':           { renderable: false, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  // 64-bit formats\n  'rg32uint':               { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  8, blockWidth: 1, blockHeight: 1 },\n  'rg32sint':               { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  8, blockWidth: 1, blockHeight: 1 },\n  'rg32float':              { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  8, blockWidth: 1, blockHeight: 1 },\n  'rgba16uint':             { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  8, blockWidth: 1, blockHeight: 1 },\n  'rgba16sint':             { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  8, blockWidth: 1, blockHeight: 1 },\n  'rgba16float':            { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  8, blockWidth: 1, blockHeight: 1 },\n  // 128-bit formats\n  'rgba32uint':             { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock: 16, blockWidth: 1, blockHeight: 1 },\n  'rgba32sint':             { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock: 16, blockWidth: 1, blockHeight: 1 },\n  'rgba32float':            { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock: 16, blockWidth: 1, blockHeight: 1 },\n  // Depth/stencil formats\n  'depth32float':           { renderable:  true, color: false, depth:  true, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'depth24plus':            { renderable:  true, color: false, depth:  true, stencil: false, storage: false, copyable: false,                                                  },\n  'depth24plus-stencil8':   { renderable:  true, color: false, depth:  true, stencil:  true, storage: false, copyable: false,                                                  },\n};\nexport const kTextureFormats = keysOf(kTextureFormatInfo);\n\nexport const kTextureDimensionInfo: {\n  readonly [k in GPUTextureDimension]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  '1d': {},\n  '2d': {},\n  '3d': {},\n};\nexport const kTextureDimensions = keysOf(kTextureDimensionInfo);\n\nexport const kTextureAspectInfo: {\n  readonly [k in GPUTextureAspect]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'all': {},\n  'depth-only': {},\n  'stencil-only': {},\n};\nexport const kTextureAspects = keysOf(kTextureAspectInfo);\n\nexport const kTextureUsageInfo: {\n  readonly [k in GPUTextureUsage]: {};\n} = {\n  [GPUTextureUsage.COPY_SRC]: {},\n  [GPUTextureUsage.COPY_DST]: {},\n  [GPUTextureUsage.SAMPLED]: {},\n  [GPUTextureUsage.STORAGE]: {},\n  [GPUTextureUsage.OUTPUT_ATTACHMENT]: {},\n};\nexport const kTextureUsages = numericKeysOf<GPUTextureUsage>(kTextureUsageInfo);\n\nexport const kTextureComponentTypeInfo: {\n  readonly [k in GPUTextureComponentType]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'float': {},\n  'sint': {},\n  'uint': {},\n};\nexport const kTextureComponentTypes = keysOf(kTextureComponentTypeInfo);\n\n// Texture View\n\nexport const kTextureViewDimensionInfo: {\n  readonly [k in GPUTextureViewDimension]: {\n    readonly storage: boolean;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  '1d':         { storage: true  },\n  '2d':         { storage: true  },\n  '2d-array':   { storage: true  },\n  'cube':       { storage: false },\n  'cube-array': { storage: false },\n  '3d':         { storage: true  },\n};\nexport const kTextureViewDimensions = keysOf(kTextureViewDimensionInfo);\n\n// Typedefs for bindings\n\nexport type PerStageBindingLimitClass =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'sampler'\n  | 'sampledTex'\n  | 'storageTex';\nexport type PerPipelineBindingLimitClass = PerStageBindingLimitClass;\n\ntype ValidBindableResource =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'plainSamp'\n  | 'compareSamp'\n  | 'sampledTex'\n  | 'storageTex';\ntype ErrorBindableResource = 'errorBuf' | 'errorSamp' | 'errorTex';\nexport type BindableResource = ValidBindableResource | ErrorBindableResource;\n\ntype BufferBindingType = 'uniform-buffer' | 'storage-buffer' | 'readonly-storage-buffer';\ntype SamplerBindingType = 'sampler' | 'comparison-sampler';\ntype TextureBindingType =\n  | 'sampled-texture'\n  | 'writeonly-storage-texture'\n  | 'readonly-storage-texture';\n\n// Bindings\n\nexport const kMaxBindingsPerBindGroup = 16;\n\nexport const kPerStageBindingLimits: {\n  readonly [k in PerStageBindingLimitClass]: {\n    readonly class: k;\n    readonly max: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', max: 12, },\n  'storageBuf': { class: 'storageBuf', max:  4, },\n  'sampler':    { class: 'sampler',    max: 16, },\n  'sampledTex': { class: 'sampledTex', max: 16, },\n  'storageTex': { class: 'storageTex', max:  4, },\n};\n\nexport const kPerPipelineBindingLimits: {\n  readonly [k in PerPipelineBindingLimitClass]: {\n    readonly class: k;\n    readonly maxDynamic: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', maxDynamic: 8, },\n  'storageBuf': { class: 'storageBuf', maxDynamic: 4, },\n  'sampler':    { class: 'sampler',    maxDynamic: 0, },\n  'sampledTex': { class: 'sampledTex', maxDynamic: 0, },\n  'storageTex': { class: 'storageTex', maxDynamic: 0, },\n};\n\nconst kBindableResource: {\n  readonly [k in BindableResource]: {};\n} = /* prettier-ignore */ {\n  uniformBuf: {}, storageBuf: {}, plainSamp: {}, compareSamp: {}, sampledTex: {}, storageTex: {},\n  errorBuf: {}, errorSamp: {}, errorTex: {},\n};\nexport const kBindableResources = keysOf(kBindableResource);\n\ninterface BindingKindInfo {\n  readonly resource: ValidBindableResource;\n  readonly perStageLimitClass: typeof kPerStageBindingLimits[PerStageBindingLimitClass];\n  readonly perPipelineLimitClass: typeof kPerPipelineBindingLimits[PerPipelineBindingLimitClass];\n  // Add fields as needed\n}\n\nconst kBindingKind: {\n  readonly [k in ValidBindableResource]: BindingKindInfo;\n} = /* prettier-ignore */ {\n  uniformBuf:  { resource: 'uniformBuf',  perStageLimitClass: kPerStageBindingLimits.uniformBuf, perPipelineLimitClass: kPerPipelineBindingLimits.uniformBuf, },\n  storageBuf:  { resource: 'storageBuf',  perStageLimitClass: kPerStageBindingLimits.storageBuf, perPipelineLimitClass: kPerPipelineBindingLimits.storageBuf, },\n  plainSamp:   { resource: 'plainSamp',   perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  compareSamp: { resource: 'compareSamp', perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  sampledTex:  { resource: 'sampledTex',  perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  storageTex:  { resource: 'storageTex',  perStageLimitClass: kPerStageBindingLimits.storageTex, perPipelineLimitClass: kPerPipelineBindingLimits.storageTex, },\n};\n\n// Binding type info\n\ninterface BindingTypeInfo extends BindingKindInfo {\n  readonly validStages: GPUShaderStageFlags;\n  // Add fields as needed\n}\nconst kValidStagesAll = {\n  validStages: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n};\nconst kValidStagesStorageWrite = { validStages: GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE };\n\nexport const kBufferBindingTypeInfo: {\n  readonly [k in BufferBindingType]: {\n    readonly usage: GPUBufferUsage;\n    // Add fields as needed\n  } & BindingTypeInfo;\n} = /* prettier-ignore */ {\n  'uniform-buffer':          { usage: GPUBufferUsage.UNIFORM, ...kBindingKind.uniformBuf,  ...kValidStagesAll,          },\n  'storage-buffer':          { usage: GPUBufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesStorageWrite, },\n  'readonly-storage-buffer': { usage: GPUBufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesAll,          },\n};\nexport const kBufferBindingTypes = keysOf(kBufferBindingTypeInfo);\n\nexport const kSamplerBindingTypeInfo: {\n  readonly [k in SamplerBindingType]: {\n    // Add fields as needed\n  } & BindingTypeInfo;\n} = /* prettier-ignore */ {\n  'sampler':                   { ...kBindingKind.plainSamp,   ...kValidStagesAll,     },\n  'comparison-sampler':        { ...kBindingKind.compareSamp, ...kValidStagesAll,     },\n};\nexport const kSamplerBindingTypes = keysOf(kSamplerBindingTypeInfo);\n\nexport const kTextureBindingTypeInfo: {\n  readonly [k in TextureBindingType]: {\n    readonly usage: GPUTextureUsage;\n    // Add fields as needed\n  } & BindingTypeInfo;\n} = /* prettier-ignore */ {\n  'sampled-texture':           { usage: GPUTextureUsage.SAMPLED, ...kBindingKind.sampledTex,  ...kValidStagesAll,          },\n  'writeonly-storage-texture': { usage: GPUTextureUsage.STORAGE, ...kBindingKind.storageTex,  ...kValidStagesStorageWrite, },\n  'readonly-storage-texture':  { usage: GPUTextureUsage.STORAGE, ...kBindingKind.storageTex,  ...kValidStagesAll,          },\n};\nexport const kTextureBindingTypes = keysOf(kTextureBindingTypeInfo);\n\n// All binding types (merged from above)\n\nexport const kBindingTypeInfo: {\n  readonly [k in GPUBindingType]: BindingTypeInfo;\n} = {\n  ...kBufferBindingTypeInfo,\n  ...kSamplerBindingTypeInfo,\n  ...kTextureBindingTypeInfo,\n};\nexport const kBindingTypes = keysOf(kBindingTypeInfo);\n\nexport const kShaderStages: readonly GPUShaderStageFlags[] = [\n  GPUShaderStage.VERTEX,\n  GPUShaderStage.FRAGMENT,\n  GPUShaderStage.COMPUTE,\n];\nexport const kShaderStageCombinations: readonly GPUShaderStageFlags[] = [0, 1, 2, 3, 4, 5, 6, 7];\n"],"file":"capability_info.js"}